PROD="false"
PORT="54786"
FLASK_PORT="54787"
CLONING="false"
PROJECT_PATH="your target project path, eg. /home/emoryhubbardiv/Documents/tailwindify"
FEATURENO="quick-test-feature.json"
REACT_STRICT_MODE="false"
KEEP_IMPORTS="true"
CORRECT_IMPORTS="true"
SHOW_DIR="true"
EXCLUDE_DIR="node_modules/ public/"
MODEL='CHATGPT3_5'
CHATGPT3_5="await fetch('https://api.openai.com/v1/chat/completions', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer CHATGPT_APIKEY`,\n                },\n                body: JSON.stringify({\n                    model: 'gpt-3.5-turbo',\n                    messages: [{ role: 'user', content: prompt}],\n                    temperature: 0.7,\n                }),\n                })"
CHATGPT_APIKEY="your key here"
LLAMA3_70B_8192="await fetch('https://api.groq.com/openai/v1/chat/completions', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer GROQ_APIKEY`,\n                },\n                body: JSON.stringify({\n                    model: 'llama3-70b-8192',\n                    messages: [{ role: 'user', content: prompt}],\n                    temperature: 0.7,\n                }),\n                })"
LLAMA3_8B_8192="await fetch('https://api.groq.com/openai/v1/chat/completions', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer GROQ_APIKEY`,\n                },\n                body: JSON.stringify({\n                    model: 'llama3-8b-8192',\n                    messages: [{ role: 'user', content: prompt}],\n                    temperature: 0.7,\n                }),\n                })"
GROQ_APIKEY='your key here'
PROMPT='ASK_SNIPPET'
ASK_FULL='Could you write a new ${step["target"]} with this modification: "${step["description"]}". In addition, could you write a simple console log statement(s) within its code to verify the change is working, which is highly likely to run (not lost in a function that isn\'t called)?'
ASK_SNIPPET_ORIGINAL='Could you write a code snippet for a new ${step["target"]} with this modification: "${step["description"]}". In addition, could you write a simple console log statement(s) (providing a second code snippet if needed) within its code to verify the change is working, which is highly likely to run (not lost in a function that isn\'t called)?'
ASK_FUNCTIONS='Could you write a code snippet for a new ${step["target"]} with this modification: "${step["description"]}". The code snippet should contain only the functions that will be modified or created. In addition, could you write a simple console log statement(s) (providing a second code snippet if needed) within its code to verify the change is working, which is highly likely to run (not lost in a function that isn\'t called)?'
ASK_SHORT='Could you give me just a short code snippet (DON\'T include the whole file or unmodified functions) that modifies ${step["target"]} like this: "${step["description"]}". The code snippet should contain only the functions that will be modified or created. In addition, could you write a simple console log statement(s) (providing a second code snippet if needed) within its code to verify the change is working, which is highly likely to run (not lost in a function that isn\'t called)?'
ASK_TERSE='Could you give me just a short code snippet (your response should be terse, no explanations, just code, and DON\'T include the whole file or unmodified functions) that modifies ${step["target"]} like this: "${step["description"]}". The code snippet should contain only the functions that will be modified or created. In addition, could you write a simple console log statement(s) (providing a second code snippet if needed) within its code to verify the change is working, which is highly likely to run (not lost in a function that isn\'t called)?'
ASK_RETURN='Could you modify ${step["target"]} like this: "${step["description"]}". Note that in this chat system your response is constrained to be a small size, so don\'t worry about including any explanations--you can just send the code. Also, don\'t worry about component return statements that occupy many code lines, just include a snippet of the portion that needs to be changed if necessary. In addition, could you write a simple console log statement(s) somewhere within the code to verify the change is working, which is highly likely to run (not lost in a function that isn\'t called)?'
ASK_NO_RETURN='Could you modify ${step["target"]} like this: "${step["description"]}". Note that in this chat system your response is constrained to be a small size, so don\'t worry about including any explanations--you can just send the code. Also, DON\'t include the component return statement in full, unless it is very very short. Just include the changed portion. In addition, could you write a simple console log statement(s) somewhere within the code to verify the change is working, which is highly likely to run (not lost in a function that isn\'t called)?'
ASK_MODIFICATIONS='Could you provide snippets of modifications to ${step["target"]}, that implement this change: "${step["description"]}". Note that in this chat system your response is constrained to be a small size, so don\'t worry about including any explanations--you can just send the code. Also, DON\'t include the component return statement in full if it is longer than a few lines of code. Just include the changed portion. In addition, could you write a simple console log statement(s) somewhere within the code to verify the change is working, which is highly likely to run (not lost in a function that isn\'t called)?'
ASK_ENTIRELY='Could you modify ${step["target"]} like this: "${step["description"]}". Note that in this chat system your response is constrained to be a small size, so don\'t worry about including any explanations--you can just send the code. Also, DON\'t include the component return statement entirely! Just include the changed portion. In addition, could you write a simple console log statement(s) somewhere within the code to verify the change is working, which is highly likely to run (not lost in a function that isn\'t called)?'
ASK_EXAMPLE='Could you modify ${step["target"]} like this: "${step["description"]}". Note that in this chat system your response is constrained to be a small size, so don\'t worry about including any explanations--you can just send the code. Also, DON\'t include the component return statement entirely! Just include the changed portion. In addition, could you write a simple console log statement(s) somewhere within the code to verify the change is working, which is highly likely to run (not lost in a function that isn\'t called)? Here is an example of what your response should like:\nimport {useState, useEffect} from \'react\'\n\nexport default function MyBigComponent() {\n\tconst [foo, setFoo] =  useState(\"bar\")\n\tconsole.log(\"Testing to see if foo is set to \" + foo);\n\treturn (\n\t\t<>\n\t\t{/* Placeholder for long JSX code in beginning of big component */}\n\t\t<p className=\"modified-elment\">\n\t\tI\'m a paragraph element that has been modified.\n\t\t<\/p>\n\t\t{/* Placeholder for long JSX code in end of big component */}\n\t\t<\/>\n\t)\n}'
ASK_SIMPLE='${step["description"]}. In addition, could you write a simple console log statement(s) somewhere within the code to verify the change is working, which is highly likely to run (not lost in a function that isn\'t called)? Here is an example of what your response should like:\nimport {useState, useEffect} from \'react\'\n\nexport default function MyBigComponent() {\n\tconst [foo, setFoo] =  useState(\"bar\")\n\tconsole.log(\"Testing to see if foo is set to \" + foo);\n\treturn (\n\t\t<>\n\t\t{/* Placeholder for long JSX code in beginning of big component */}\n\t\t<p className=\"modified-elment\">\n\t\tI\'m a paragraph element that has been modified.\n\t\t<\/p>\n\t\t{/* Placeholder for long JSX code in end of big component */}\n\t\t<\/>\n\t)\n}'
ASK_20='${step["description"]}. Please respond with 20 lines of code or less. In addition, could you write a simple console log statement(s) somewhere within the code to verify the change is working, which is highly likely to run (not lost in a function that isn\'t called)? Here is an example of what your response should like:\nimport {useState, useEffect} from \'react\'\n\nexport default function MyBigComponent() {\n\tconst [foo, setFoo] =  useState(\"bar\")\n\tconsole.log(\"Testing to see if foo is set to \" + foo);\n\treturn (\n\t\t<>\n\t\t{/* Placeholder for long JSX code in beginning of big component */}\n\t\t<p className=\"modified-elment\">\n\t\tI\'m a paragraph element that has been modified.\n\t\t<\/p>\n\t\t{/* Placeholder for long JSX code in end of big component */}\n\t\t<\/>\n\t)\n}'
ASK_NOTHING=''
ASK_REALLY_SHORT='Could you add a function to set last visit in page.jsx? Please keep your response REALLY short, DON\'T repeat all of page.jsx. I repeat, DON\'T repeat all of page.jsx when you respond.'
ASK_REALLY_DESCRIPTION='${step["description"]}. Please keep your response REALLY short, DON\'T repeat all of page.jsx. I repeat, DON\'T repeat all of page.jsx when you respond.'
ASK_REALLY_TEST='${step["description"]}. Please keep your response REALLY short, DON\'T repeat all of page.jsx. I repeat, DON\'T repeat all of page.jsx when you respond. In addition, could you write a simple console log statement(s) somewhere within the code to verify the change is working, which is highly likely to run (not lost in a function that isn\'t called)?'
ASK_REALLY_SOME='${step["description"]}. Include some component code to properly place the snippet, but please keep your response REALLY short, DON\'T repeat all of page.jsx. I repeat, DON\'T repeat all of page.jsx when you respond. In addition, could you write a simple console log statement(s) somewhere within the code to verify the change is working, which is highly likely to run (not lost in a function that isn\'t called)?'
# ASK_REALLY_EXAMPLE was the standard ASK_SNIPPET until problems arose with (1)
# button-based responses, and (2) lack of reference points between JSX placeholders
ASK_REALLY_EXAMPLE='${step["description"]}. Include some component code to properly place the snippet, but please keep your response REALLY short, DON\'T repeat all of page.jsx. I repeat, DON\'T repeat all of page.jsx when you respond. In addition, could you write a simple console log statement(s) somewhere within the code to verify the change is working, which is highly likely to run (not lost in a function that isn\'t called)? Here is an example of what your response should like:\nimport {useState, useEffect} from \'react\'\n\nexport default function MyBigComponent() {\n\tconst [foo, setFoo] =  useState(\"bar\")\n\tconsole.log(\"Testing to see if foo is set to \" + foo);\n\treturn (\n\t\t<>\n\t\t{/* Placeholder for long JSX code in beginning of big component */}\n\t\t<p className=\"modified-elment\">\n\t\tI\'m a paragraph element that has been modified.\n\t\t<\/p>\n\t\t{/* Placeholder for long JSX code in end of big component */}\n\t\t<\/>\n\t)\n}'
ASK_REALLY_UNMODIFIED='${step["description"]}. Include some component code to properly place the snippet, but please keep your response REALLY short, DON\'T repeat all of page.jsx. I repeat, DON\'T repeat all of page.jsx when you respond. In addition, could you write a simple console log statement(s) somewhere within the code to verify the change is working, which is highly likely to run (not lost in a function that isn\'t called)? Here is an example of what your response should like:\nimport {useState, useEffect} from \'react\'\n\nexport default function MyBigComponent() {\n\tconst [foo, setFoo] =  useState(\"bar\")\n\tconsole.log(\"Testing to see if foo is set to \" + foo);\n\treturn (\n\t\t<>\n\t\t{/* Placeholder for any JSX code prior to unmodified element */}\n\t\t<p className=\"unmodified-element">I\'m an unmodified element to indicate insertion position.</p>\n\t\t<p className=\"modified-elment\">\n\t\tI\'m a paragraph element that is new or modified.\n\t\t<\/p>\n\t\t{/* Placeholder for rest of JSX code */}\n\t\t<\/>\n\t)\n}'
ASK_SNIPPET='ASK_REALLY_EXAMPLE'
